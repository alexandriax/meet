{
  "/Users/alexandriahamilton/Desktop/web-dev/meet/auth-server": {
    "versionSfCore": null,
    "versionFramework": "4.2.5",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "meet-auth-server",
            "provider": {
              "name": "aws",
              "runtime": "nodejs14.x",
              "region": "us-east-1",
              "environment": {
                "NODE_ENV": "development",
                "GOOGLE_API_KEY": "<REDACTED>"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*",
                    "s3:*",
                    "sns:*",
                    "sqs:*"
                  ],
                  "Resource": "*"
                }
              ],
              "stage": "dev",
              "versionFunctions": true
            },
            "functions": {
              "hello": {
                "handler": "handler.hello",
                "events": [
                  {
                    "http": {
                      "path": "hello",
                      "method": "get",
                      "cors": true
                    }
                  }
                ]
              }
            },
            "plugins": [
              "serverless-offline"
            ],
            "custom": {
              "serverless-offline": {
                "httpPort": 3000
              }
            },
            "resources": {
              "Resources": null
            }
          },
          "configFileDirPath": "/Users/alexandriahamilton/Desktop/web-dev/meet/auth-server",
          "config": {
            "type": "env"
          },
          "options": {
            "provider": "aws",
            "key": "AKIARZ5BMRTQ34WJ63SZ",
            "secret": "<REDACTED>"
          },
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/alexandriahamilton/Desktop/web-dev/meet/auth-server",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "meet-auth-server",
      "provider": {
        "name": "aws",
        "runtime": "nodejs14.x",
        "region": "us-east-1",
        "environment": {
          "NODE_ENV": "development",
          "GOOGLE_API_KEY": "<REDACTED>"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*",
              "s3:*",
              "sns:*",
              "sqs:*"
            ],
            "Resource": "*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true
      },
      "functions": {
        "hello": {
          "handler": "handler.hello",
          "events": [
            {
              "http": {
                "path": "hello",
                "method": "get",
                "cors": true
              }
            }
          ]
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "custom": {
        "serverless-offline": {
          "httpPort": 3000
        }
      },
      "resources": {
        "Resources": null
      }
    },
    "serviceRawFile": "service: meet-auth-server\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  region: us-east-1 # or your preferred AWS region\n  environment:\n    NODE_ENV: ${env:NODE_ENV, 'development'} # Ensures your environment variables are available\n    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY, 'api'} # Placeholder for Google API key\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:*\n        - s3:*\n        - sns:*\n        - sqs:*\n      Resource: \"*\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n          cors: true\n\nplugins:\n  - serverless-offline # Useful for local development\n\ncustom:\n  serverless-offline:\n    httpPort: 3000\n\nresources:\n  Resources:\n    # Any additional AWS resources you might need\n# chatgpt code (command not working)",
    "command": [
      "config",
      "credentials"
    ],
    "options": {
      "provider": "aws",
      "key": "AKIARZ5BMRTQ34WJ63SZ",
      "secret": "<REDACTED>"
    },
    "error": {
      "message": "The \"config credentials\" command was deprecated in v4. To configure your AWS credentials, run the \"serverless\" command instead.",
      "code": "UNRECOGNIZED_CLI_COMMAND"
    },
    "params": {},
    "machineId": "9d0b40d5d5c12a9899ac7a440cfe0a55",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "7fda228f-7ea5-49c9-aedc-841e93743a0a",
    "orgName": "alexandriax",
    "userId": "jKk2VJlHqsYchKLlHT",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "alexandriax",
    "subscription": null,
    "userEmail": "allyhamilton0@gmail.com",
    "projectType": "framework",
    "versionSf": "4.2.5",
    "serviceProviderAwsCfStackName": "meet-auth-server-dev",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  },
  "unknown": {
    "versionSfCore": null,
    "versionFramework": "4.2.5",
    "isWithinCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "command": [],
    "options": {},
    "error": null,
    "machineId": "9d0b40d5d5c12a9899ac7a440cfe0a55",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}